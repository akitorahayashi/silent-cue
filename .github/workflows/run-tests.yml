name: Run Tests

on:
  workflow_call:
    outputs:
      test_result:
        description: "Test Result"
        value: ${{ jobs.build-and-test.outputs.test_result }}

jobs:
  build-and-test:
    runs-on: macos-latest
    env:
      MINT_PATH: ${{ github.workspace }}/.mint
    outputs:
      test_result: ${{ steps.test_status.outputs.result }}
    steps:
    - uses: actions/checkout@v4

    - name: Cache Mint packages
      uses: actions/cache@v4
      id: cache-mint-packages
      with:
        path: ${{ env.MINT_PATH }}
        key: ${{ runner.os }}-mint-${{ hashFiles('**/Mintfile') }}
        restore-keys: |
          ${{ runner.os }}-mint-

    - name: Install Mint
      run: brew install mint

    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '16.2'

    - name: Generate Xcode Project
      run: mint run xcodegen generate

    - name: Create Test Output Directories
      run: mkdir -p ci-outputs/test-results/unit ci-outputs/test-results/ui ci-outputs/test-results/derived-data
        
    - name: Make find-simulator script executable
      run: chmod +x .github/scripts/find-simulator.sh

    - name: Select Simulator
      id: select_simulator
      run: |
        SIMULATOR_ID=$(./.github/scripts/find-simulator.sh)
        echo "シミュレータ ID ($SIMULATOR_ID) が選択されました"
        echo "simulator_id=$SIMULATOR_ID" >> $GITHUB_OUTPUT

    - name: Build for Testing
      env:
        TZ: Asia/Tokyo
      run: |
        set -o pipefail
        echo "シミュレータ ID (${{ steps.select_simulator.outputs.simulator_id }}) を使用してテスト用にビルドします"
        xcodebuild build-for-testing \
          -project "SilentCue.xcodeproj" \
          -scheme "SilentCue Watch App" \
          -destination "platform=watchOS Simulator,id=${{ steps.select_simulator.outputs.simulator_id }}" \
          -derivedDataPath ./ci-outputs/test-results/DerivedData \
          -configuration Debug \
          -skipMacroValidation \
          CODE_SIGNING_ALLOWED=NO \
          | xcbeautify
      continue-on-error: false
      
    - name: Run Unit Tests
      id: unit_tests
      env:
        TZ: Asia/Tokyo
      run: |
        set -o pipefail
        echo "シミュレータ ID (${{ steps.select_simulator.outputs.simulator_id }}) を使用してユニットテストを実行します"
        # Execute test command but don't fail the step immediately on non-zero exit code
        xcodebuild test-without-building \
          -project "SilentCue.xcodeproj" \
          -scheme "SilentCue Watch AppTests" \
          -destination "platform=watchOS Simulator,id=${{ steps.select_simulator.outputs.simulator_id }}" \
          -derivedDataPath ./ci-outputs/test-results/DerivedData \
          -enableCodeCoverage NO \
          -resultBundlePath ./ci-outputs/test-results/unit/TestResults.xcresult \
          | xcbeautify --report junit --report-path ./ci-outputs/test-results/unit/junit.xml
        
        # Capture the exit status of xcodebuild (first command in the pipe)
        XCODEBUILD_EXIT_CODE=${PIPESTATUS[0]}
        echo "UNIT_TEST_XCODEBUILD_STATUS=$XCODEBUILD_EXIT_CODE" >> $GITHUB_ENV
        ls -la ./ci-outputs/test-results/unit/
      continue-on-error: false
      
    - name: Verify Unit Test Results
      run: |
        echo "Checking for Unit Test results bundle..."
        RESULT_BUNDLE_PATH="./ci-outputs/test-results/unit/TestResults.xcresult"
        if [ ! -d "$RESULT_BUNDLE_PATH" ]; then
          echo "❌ Error: Unit test result bundle not found at $RESULT_BUNDLE_PATH"
          exit 1
        fi
        echo "✅ Unit test result bundle found at $RESULT_BUNDLE_PATH"
      continue-on-error: false

    - name: Run UI Tests
      id: ui_tests
      env:
        TZ: Asia/Tokyo
      run: |
        set -o pipefail
        echo "シミュレータ ID (${{ steps.select_simulator.outputs.simulator_id }}) を使用して UI テストを実行します"
        # Execute test command but don't fail the step immediately on non-zero exit code
        xcodebuild test-without-building \
          -project "SilentCue.xcodeproj" \
          -scheme "SilentCue Watch AppUITests" \
          -destination "platform=watchOS Simulator,id=${{ steps.select_simulator.outputs.simulator_id }}" \
          -derivedDataPath ./ci-outputs/test-results/DerivedData \
          -enableCodeCoverage NO \
          -resultBundlePath ./ci-outputs/test-results/ui/TestResults.xcresult \
          | xcbeautify --report junit --report-path ./ci-outputs/test-results/ui/junit.xml
          
        # Capture the exit status of xcodebuild (first command in the pipe)
        XCODEBUILD_EXIT_CODE=${PIPESTATUS[0]}
        echo "UI_TEST_XCODEBUILD_STATUS=$XCODEBUILD_EXIT_CODE" >> $GITHUB_ENV
        ls -la ./ci-outputs/test-results/ui/
      continue-on-error: false

    - name: Verify UI Test Results
      run: |
        echo "Checking for UI Test results bundle..."
        RESULT_BUNDLE_PATH="./ci-outputs/test-results/ui/TestResults.xcresult"
        if [ ! -d "$RESULT_BUNDLE_PATH" ]; then
          echo "❌ Error: UI test result bundle not found at $RESULT_BUNDLE_PATH"
          exit 1
        fi
        echo "✅ UI test result bundle found at $RESULT_BUNDLE_PATH"
      continue-on-error: false

    - name: Set Test Status
      id: test_status
      run: echo "result=success" >> $GITHUB_OUTPUT
      
    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: ci-outputs/test-results
        retention-days: 7 