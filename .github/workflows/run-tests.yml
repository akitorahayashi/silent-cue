name: Run Tests

on:
  workflow_call:
    outputs:
      test_result:
        description: "Test Result"
        value: ${{ jobs.build-and-test.outputs.test_result }}

jobs:
  build-and-test:
    runs-on: macos-latest
    outputs:
      test_result: ${{ steps.set_test_status.outputs.result }}
    steps:
    - uses: actions/checkout@v4

    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '16.2'

    - name: Install xcpretty
      run: gem install xcpretty

    - name: Clean Output Directory
      shell: bash
      run: |
        source .github/scripts/build-steps/clean-old-output.sh
        clean_old_output

    - name: Select Simulator
      id: select_simulator
      shell: bash
      run: |
        source .github/scripts/build-steps/select-simulator.sh
        # select_simulator は成功時にIDを標準出力へ出力、失敗時は非ゼロで終了
        simulator_id=$(select_simulator)
        echo "simulator_id=$simulator_id" >> $GITHUB_OUTPUT

    - name: Build for Testing
      id: build_for_testing
      shell: bash
      run: |
        source .github/scripts/build-steps/build-for-testing.sh
        build_for_testing ${{ steps.select_simulator.outputs.simulator_id }}
      # このステップは build_for_testing 関数が失敗(非ゼロ終了)したら失敗する

    - name: Run Unit Tests
      id: run_unit_tests
      shell: bash
      run: |
        source .github/scripts/build-steps/run-unit-tests.sh
        # 関数の終了コードをキャプチャして exit
        run_unit_tests ${{ steps.select_simulator.outputs.simulator_id }}
        exit $?
      continue-on-error: true # ステップが失敗してもワークフローを続行

    - name: Verify Unit Test Results
      id: verify_unit_tests
      shell: bash
      # Runステップが成功した場合のみ実行
      if: steps.run_unit_tests.outcome == 'success'
      run: |
        source .github/scripts/build-steps/run-unit-tests.sh
        # 引数なしで verify 関数を呼び出す
        verify_unit_test_results
      # このステップは検証失敗時にジョブを失敗させない (後続処理のため)
      continue-on-error: true

    - name: Run UI Tests
      id: run_ui_tests
      shell: bash
      run: |
        source .github/scripts/build-steps/run-ui-tests.sh
        # 関数の終了コードをキャプチャして exit
        run_ui_tests ${{ steps.select_simulator.outputs.simulator_id }}
        exit $?
      continue-on-error: true # ステップが失敗してもワークフローを続行

    - name: Verify UI Test Results
      id: verify_ui_tests
      shell: bash
      # Runステップが成功した場合のみ実行
      if: steps.run_ui_tests.outcome == 'success'
      run: |
        source .github/scripts/build-steps/run-ui-tests.sh
        # 引数なしで verify 関数を呼び出す
        verify_ui_test_results
      # このステップは検証失敗時にジョブを失敗させない (後続処理のため)
      continue-on-error: true

    # xcresult から JUnit レポートを生成
    - name: Generate Unit Test JUnit Report
      if: always() # 以前のステップが失敗した場合でも、常にレポートを生成するために実行
      run: |
        echo "Generating Unit Test JUnit Report..."
        if [ -d ./ci-outputs/test-results/unit/TestResults.xcresult ]; then
          xcbeautify --quiet --report junit --report-path ./ci-outputs/test-results/unit/junit.xml --is-ci < ./ci-outputs/test-results/unit/TestResults.xcresult
          if [ ! -f ./ci-outputs/test-results/unit/junit.xml ]; then
            echo "⚠️ Unit test JUnit report not generated."
          else
            echo "✅ Unit test JUnit report generated."
          fi
        else
            echo "⚠️ Unit test .xcresult bundle not found, skipping report generation."
        fi

    - name: Generate UI Test JUnit Report
      if: always()
      run: |
        echo "Generating UI Test JUnit Report..."
        if [ -d ./ci-outputs/test-results/ui/TestResults.xcresult ]; then
          xcbeautify --quiet --report junit --report-path ./ci-outputs/test-results/ui/junit.xml --is-ci < ./ci-outputs/test-results/ui/TestResults.xcresult
          if [ ! -f ./ci-outputs/test-results/ui/junit.xml ]; then
            echo "⚠️ UI test JUnit report not generated."
          else
            echo "✅ UI test JUnit report generated."
          fi
        else
           echo "⚠️ UI test .xcresult bundle not found, skipping report generation."
        fi

    # スクリプトの終了コードとレポート内容に基づいて全体のテストステータスを設定
    - name: Set Test Status
      id: set_test_status
      if: always() # ジョブ全体の成否に関わらず、常にこのステップを実行して最終結果を判断
      run: |
        echo "Build step outcome: ${{ steps.build_for_testing.outcome }}"
        echo "Unit Test Run outcome: ${{ steps.run_unit_tests.outcome }}"
        echo "Unit Test Verify outcome: ${{ steps.verify_unit_tests.outcome }}"
        echo "UI Test Run outcome: ${{ steps.run_ui_tests.outcome }}"
        echo "UI Test Verify outcome: ${{ steps.verify_ui_tests.outcome }}"
        # 主要な実行ステップと検証ステップの outcome が failure かどうかをチェック
        if [[ "${{ steps.build_for_testing.outcome }}" == "failure" || \
              "${{ steps.run_unit_tests.outcome }}" == "failure" || \
              "${{ steps.verify_unit_tests.outcome }}" == "failure" || \
              "${{ steps.run_ui_tests.outcome }}" == "failure" || \
              "${{ steps.verify_ui_tests.outcome }}" == "failure" ]]; then
           # いずれかのステップが失敗した場合
           echo "❌ One or more steps failed."
           echo "result=failure" >> $GITHUB_OUTPUT
        else
          # すべてのステップが成功した場合
          echo "✅ All tests passed."
          echo "result=success" >> $GITHUB_OUTPUT
        fi

    - name: Upload Test Results
      if: always() # 失敗時でも結果をアップロード
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: ci-outputs/test-results # .xcresult と .xml をアップロード
        retention-days: 7 