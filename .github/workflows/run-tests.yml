name: Run Tests

on:
  workflow_call:
    outputs:
      test_result:
        description: "Test Result"
        value: ${{ jobs.build-and-test.outputs.test_result }}

jobs:
  build-and-test:
    runs-on: macos-latest
    outputs:
      test_result: ${{ steps.set_test_status.outputs.result }}
    steps:
    - uses: actions/checkout@v4

    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '16.2'

    - name: Install xcpretty
      run: gem install xcpretty

    - name: Select Simulator and Set Env Var
      id: select_simulator
      shell: bash
      run: |
        source .github/scripts/common/logging.sh
        source .github/scripts/ci-env.sh
        source .github/scripts/build-steps/select-simulator.sh
        select_simulator

    - name: Build for Testing
      id: build
      if: steps.select_simulator.outcome == 'success'
      shell: bash
      run: |
        source .github/scripts/common/logging.sh
        source .github/scripts/ci-env.sh
        source .github/scripts/build-steps/build-for-testing.sh
        build_for_testing
      continue-on-error: true

    - name: Verify Build for Testing
      id: verify_build
      if: steps.build.outcome == 'success'
      shell: bash
      run: |
        source .github/scripts/common/logging.sh
        source .github/scripts/ci-env.sh
        source .github/scripts/build-steps/build-for-testing.sh
        verify_build_for_testing
      continue-on-error: true

    - name: Run Unit Tests
      id: run_unit_tests
      if: steps.verify_build.outcome == 'success'
      shell: bash
      run: |
        source .github/scripts/common/logging.sh
        source .github/scripts/ci-env.sh
        source .github/scripts/build-steps/run-unit-tests.sh
        run_unit_tests
      continue-on-error: true

    - name: Verify Unit Test Results
      id: verify_unit_tests
      if: steps.run_unit_tests.outcome == 'success'
      shell: bash
      run: |
        source .github/scripts/common/logging.sh
        source .github/scripts/ci-env.sh
        source .github/scripts/build-steps/run-unit-tests.sh
        verify_unit_test_results
      continue-on-error: true

    - name: Run UI Tests
      id: run_ui_tests
      if: steps.verify_build.outcome == 'success'
      shell: bash
      run: |
        source .github/scripts/common/logging.sh
        source .github/scripts/ci-env.sh
        source .github/scripts/build-steps/run-ui-tests.sh
        run_ui_tests
      continue-on-error: true

    - name: Verify UI Test Results
      id: verify_ui_tests
      if: steps.run_ui_tests.outcome == 'success'
      shell: bash
      run: |
        source .github/scripts/common/logging.sh
        source .github/scripts/ci-env.sh
        source .github/scripts/build-steps/run-ui-tests.sh
        verify_ui_test_results
      continue-on-error: true

    - name: Set Test Status
      id: set_test_status
      if: always()
      run: |
        echo "Select Simulator step outcome: ${{ steps.select_simulator.outcome }}"
        echo "Build step outcome: ${{ steps.build.outcome }}"
        echo "Verify Build step outcome: ${{ steps.verify_build.outcome }}"
        echo "Unit Test Run outcome: ${{ steps.run_unit_tests.outcome }}"
        echo "Unit Test Verify outcome: ${{ steps.verify_unit_tests.outcome }}"
        echo "UI Test Run outcome: ${{ steps.run_ui_tests.outcome }}"
        echo "UI Test Verify outcome: ${{ steps.verify_ui_tests.outcome }}"
        if [[ "${{ steps.select_simulator.outcome }}" == "failure" || \
              "${{ steps.build.outcome }}" == "failure" || \
              "${{ steps.verify_build.outcome }}" == "failure" || \
              "${{ steps.run_unit_tests.outcome }}" == "failure" || \
              "${{ steps.verify_unit_tests.outcome }}" == "failure" || \
              "${{ steps.run_ui_tests.outcome }}" == "failure" || \
              "${{ steps.verify_ui_tests.outcome }}" == "failure" ]]; then
           echo "❌ One or more steps failed."
           echo "result=failure" >> $GITHUB_OUTPUT
        else
          echo "✅ All tests passed."
          echo "result=success" >> $GITHUB_OUTPUT
        fi

    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: ci-outputs/test-results
        retention-days: 7 