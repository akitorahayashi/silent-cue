name: Run Tests

on:
  workflow_call:
    outputs:
      test_result:
        description: "Test Result"
        value: ${{ jobs.report-status.outputs.test_result }}

jobs:
  test:
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Restore Mint Cache
        uses: actions/cache@v4
        id: cache-mint-packages-tests
        with:
          path: ~/.mint
          key: ${{ runner.os }}-mint-${{ hashFiles('**/Mintfile') }}
          restore-keys: |
            ${{ runner.os }}-mint-

      - name: Install Mint
        run: brew install mint

      - name: Generate Project
        run: make codegen

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.2'

      - name: Find Simulator ID
        id: find_sim
        run: |
          set -o pipefail
          echo "利用可能なApple Watchシミュレータを検索中..."
          PROJECT="SilentCue.xcodeproj"
          SCHEME_WATCH_APP="SilentCue Watch App"
          SCHEME_UI_TESTS="SilentCue Watch AppUITests"

          SIM_INFO=$(xcrun xcodebuild -showdestinations -project "$PROJECT" -scheme "$SCHEME_WATCH_APP" | grep 'platform:watchOS Simulator' | grep 'name:Apple Watch' | head -n 1)
          if [[ -z "$SIM_INFO" ]]; then
            echo "::error::エラー: スキーム '$SCHEME_WATCH_APP' に適した 'Apple Watch' シミュレータが見つかりません。"
            exit 1
          fi
          echo "発見したシミュレータ情報: $SIM_INFO"

          SIM_ID=$(echo "$SIM_INFO" | sed -nE 's/.*id:([0-9A-F-]+).*/\1/p')
          if [[ -z "$SIM_ID" ]]; then
            echo "::error::エラー: シミュレータIDを抽出できませんでした: $SIM_INFO"
            exit 1
          fi
          echo "抽出したシミュレータID: $SIM_ID"

          echo "UIテストスキームでシミュレータIDを検証中..."
          if ! xcrun xcodebuild -showdestinations -project "$PROJECT" -scheme "$SCHEME_UI_TESTS" | grep -q "id:$SIM_ID"; then
            echo "::error::エラー: シミュレータID $SIM_ID はUIテストスキーム '$SCHEME_UI_TESTS' で有効ではありません。"
            exit 1
          fi
          echo "シミュレータID $SIM_ID が検証されました。"

          echo "SIMULATOR_ID=$SIM_ID" >> $GITHUB_ENV

      - name: Run Unit Tests
        id: unit_tests
        run: make unit-test

      - name: Run UI Tests
        id: ui_tests
        run: make ui-test

      - name: Upload Unit Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-results-${{ github.run_id }}
          path: ci-outputs/test-results/unit
          retention-days: 7

      - name: Upload UI Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ui-test-results-${{ github.run_id }}
          path: ci-outputs/test-results/ui
          retention-days: 7

  report-status:
    needs: [test]
    runs-on: ubuntu-latest
    if: always()
    outputs:
      test_result: ${{ steps.set_status.outputs.result }}
    steps:
      - name: Check test job outcomes and set final status
        id: set_status
        run: |
          echo "Test job outcome: ${{ needs.test.result }}"
          if [[ "${{ needs.test.result }}" == "success" ]]; then
            echo "Test job succeeded."
            echo "result=success" >> $GITHUB_OUTPUT
          else
            echo "Test job failed or was skipped."
            echo "result=failure" >> $GITHUB_OUTPUT
          fi 