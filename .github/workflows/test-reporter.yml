name: Test Reporter

on:
  workflow_call:
    inputs:
      pull_request_number:
        description: 'Pull Request number'
        required: true
        type: number

permissions:
  checks: write          # JUnitレポートをChecksとして表示するために必要
  actions: read          # アーティファクトをダウンロードするために必要
  pull-requests: write   # PRにコメントするために必要

jobs:
  report:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code # jq を使うためにリポジトリをチェックアウト
        uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Download test results artifact
        uses: actions/download-artifact@v4
        with:
          name: test-results # build-and-test.yml でアップロードされたテスト結果のアーティファクト名
          path: ./test-results

      - name: Download coverage reports artifact
        uses: actions/download-artifact@v4
        with:
          name: coverage-reports # build-and-test.yml でアップロードされたカバレッジアーティファクト名
          path: ./coverage-artifact

      - name: List downloaded files (for debugging)
        run: |
          echo "--- Test Results ---"
          ls -lR ./test-results
          echo "--- Coverage Artifact ---"
          ls -lR ./coverage-artifact

      - name: Publish Test Report as Check
        uses: mikepenz/action-junit-report@v4
        # JUnitファイルが存在する場合のみ実行
        if: ${{ hashFiles('./test-results/unit/junit.xml') != '' || hashFiles('./test-results/ui/junit.xml') != '' }}
        with:
          report_paths: './test-results/unit/junit.xml,./test-results/ui/junit.xml'
          github_token: ${{ secrets.GITHUB_TOKEN }}
          fail_on_failure: false # レポートステップ自体は失敗させない
          require_tests: false # テストがなくてもエラーにしない
          check_name: 'Test Suite Results' # Checksタブに表示される名前

      - name: Parse coverage report
        id: coverage
        run: |
          COVERAGE_FILE="./coverage-artifact/combined/coverage.json" # アーティファクト内の正しいパスを指定
          if [ -f "$COVERAGE_FILE" ]; then
            COVERAGE_PERCENTAGE=$(jq '.lineCoverage * 100' "$COVERAGE_FILE")
            COVERAGE_FORMATTED=$(printf "%.1f" "$COVERAGE_PERCENTAGE") # 小数点第一位までフォーマット
            echo "Overall Line Coverage: ${COVERAGE_FORMATTED}%"
            echo "percentage=${COVERAGE_FORMATTED}" >> $GITHUB_OUTPUT
            echo "found=true" >> $GITHUB_OUTPUT
          else
            echo "Coverage report not found at $COVERAGE_FILE"
            echo "found=false" >> $GITHUB_OUTPUT
          fi

      - name: Parse unit coverage report
        id: unit_coverage
        run: |
          COVERAGE_FILE="./test-results/unit/TestResults.xcresult"
          JSON_OUTPUT_TEMP="./test-results/unit/coverage.json" # Temporary file for JSON output
          if [ -d "$COVERAGE_FILE" ]; then
            echo "Generating unit test coverage report..."
            if xcrun xccov view --report --json "$COVERAGE_FILE" > "$JSON_OUTPUT_TEMP"; then
              COVERAGE_PERCENTAGE=$(jq '.lineCoverage * 100' "$JSON_OUTPUT_TEMP")
              COVERAGE_FORMATTED=$(printf "%.1f" "$COVERAGE_PERCENTAGE")
              echo "Unit Test Line Coverage: ${COVERAGE_FORMATTED}%"
              echo "percentage=${COVERAGE_FORMATTED}" >> $GITHUB_OUTPUT
              echo "found=true" >> $GITHUB_OUTPUT
              rm "$JSON_OUTPUT_TEMP" # Clean up temporary file
            else
              echo "Error generating unit test coverage report JSON from $COVERAGE_FILE"
              echo "found=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "Unit test coverage result bundle not found at $COVERAGE_FILE"
            echo "found=false" >> $GITHUB_OUTPUT
          fi

      - name: Parse ui coverage report
        id: ui_coverage
        run: |
          COVERAGE_FILE="./test-results/ui/TestResults.xcresult"
          JSON_OUTPUT_TEMP="./test-results/ui/coverage.json" # Temporary file for JSON output
          if [ -d "$COVERAGE_FILE" ]; then
            echo "Generating UI test coverage report..."
            if xcrun xccov view --report --json "$COVERAGE_FILE" > "$JSON_OUTPUT_TEMP"; then
              COVERAGE_PERCENTAGE=$(jq '.lineCoverage * 100' "$JSON_OUTPUT_TEMP")
              COVERAGE_FORMATTED=$(printf "%.1f" "$COVERAGE_PERCENTAGE")
              echo "UI Test Line Coverage: ${COVERAGE_FORMATTED}%"
              echo "percentage=${COVERAGE_FORMATTED}" >> $GITHUB_OUTPUT
              echo "found=true" >> $GITHUB_OUTPUT
              rm "$JSON_OUTPUT_TEMP" # Clean up temporary file
            else
              echo "Error generating UI test coverage report JSON from $COVERAGE_FILE"
              echo "found=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "UI test coverage result bundle not found at $COVERAGE_FILE"
            echo "found=false" >> $GITHUB_OUTPUT
          fi

      - name: Create or Update PR Comment
        # Run if test results or any coverage report was found
        if: ${{ hashFiles('./test-results/**/*.xml') != '' || steps.coverage.outputs.found == 'true' || steps.unit_coverage.outputs.found == 'true' || steps.ui_coverage.outputs.found == 'true' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = ${{ inputs.pull_request_number }};
            if (!prNumber) {
              console.error('Could not extract pull request number.');
              return;
            }

            const { owner, repo } = context.repo;
            // Get step outputs as strings
            const combinedCoverageFound = '${{ steps.coverage.outputs.found }}' === 'true';
            const rawCombinedCoverage = '${{ steps.coverage.outputs.percentage }}';
            const unitCoverageFound = '${{ steps.unit_coverage.outputs.found }}' === 'true';
            const rawUnitCoverage = '${{ steps.unit_coverage.outputs.percentage }}';
            const uiCoverageFound = '${{ steps.ui_coverage.outputs.found }}' === 'true';
            const rawUiCoverage = '${{ steps.ui_coverage.outputs.percentage }}';
            
            // Parse percentages, providing null if not found or invalid
            const combinedCoveragePercentage = combinedCoverageFound && !isNaN(parseFloat(rawCombinedCoverage)) ? parseFloat(rawCombinedCoverage) : null;
            const unitCoveragePercentage = unitCoverageFound && !isNaN(parseFloat(rawUnitCoverage)) ? parseFloat(rawUnitCoverage) : null;
            const uiCoveragePercentage = uiCoverageFound && !isNaN(parseFloat(rawUiCoverage)) ? parseFloat(rawUiCoverage) : null;

            const commentMarker = '<!-- test-and-coverage-report -->';
            let commentBody = `${commentMarker}\\n\\n## Test & Coverage Summary\\n\\n`;
            const fs = require('fs');

            // Test Results Summary
            const unitTestFile = './test-results/unit/junit.xml';
            const uiTestFile = './test-results/ui/junit.xml';
            if (fs.existsSync(unitTestFile) || fs.existsSync(uiTestFile)) {
               commentBody += `✅ Test Results: Available in Checks tab.\\n`;
            } else {
               commentBody += `ℹ️ Test Results: No JUnit reports found.\\n`;
            }

            // Coverage Info
            commentBody += `\\n📊 **Code Coverage:**\\n`; // Section header for coverage
            let coverageReported = false;
            if (combinedCoveragePercentage !== null) {
              commentBody += `- **Overall:** **${combinedCoveragePercentage.toFixed(1)}%**\\n`;
              coverageReported = true;
            }
            if (unitCoveragePercentage !== null) {
              commentBody += `- Unit Tests: ${unitCoveragePercentage.toFixed(1)}%\\n`;
              coverageReported = true;
            }
            if (uiCoveragePercentage !== null) {
              commentBody += `- UI Tests: ${uiCoveragePercentage.toFixed(1)}%\\n`;
              coverageReported = true;
            }
            if (!coverageReported) {
              commentBody += `⚠️ No coverage reports found.\\n`;
            }

            // 既存コメントの検索・更新 or 新規作成
            const { data: comments } = await github.rest.issues.listComments({ owner, repo, issue_number: prNumber });
            const existingComment = comments.find(c => c.user.login === 'github-actions[bot]' && c.body.includes(commentMarker));

            if (existingComment) {
              console.log(`Updating comment ${existingComment.id} on PR #${prNumber}`);
              await github.rest.issues.updateComment({ owner, repo, comment_id: existingComment.id, body: commentBody });
            } else {
              console.log(`Creating new comment on PR #${prNumber}`);
              await github.rest.issues.createComment({ owner, repo, issue_number: prNumber, body: commentBody });
            }