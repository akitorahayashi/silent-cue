name: Build & Test

on:
  workflow_call:
    outputs:
      test_result:
        description: "Test Result"
        value: ${{ jobs.test.outputs.test_result }}

jobs:
  test:
    runs-on: macos-latest
    outputs:
      test_result: ${{ steps.test_status.outputs.result }}
    steps:
    - uses: actions/checkout@v4

    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '16.2'

    - name: Find Simulator
      id: find-simulator
      run: |
        echo "Available watchOS Simulators:"
        xcrun simctl list devices available | grep -A 20 "watchOS"
        
        # watchOSバージョンを取得
        WATCHOS_VERSION=$(xcrun simctl list devices available | grep -A 1 "watchOS" | head -1 | grep -oE 'watchOS [0-9]+\.[0-9]+')
        
        # シミュレータの名前とIDを取得
        SIMULATOR_INFO=$(xcrun simctl list devices available | grep -A 20 "watchOS" | grep 'Apple Watch Series' | head -1)
        SIMULATOR_NAME=$(echo "$SIMULATOR_INFO" | sed -E 's/^[[:space:]]*([^(]+).*$/\1/' | xargs)
        SIMULATOR_ID=$(echo "$SIMULATOR_INFO" | grep -oE '[0-9A-F\\-]{36}')
        
        echo "simulator_id=$SIMULATOR_ID" >> $GITHUB_OUTPUT
        echo "Using $SIMULATOR_NAME with $WATCHOS_VERSION (ID: $SIMULATOR_ID)"
        
    - name: Install xcpretty
      run: |
        gem install xcpretty
        
    - name: Create Test Results Directory
      run: mkdir -p test-results/unit test-results/ui
        
    - name: Build for Testing
      run: |
        xcodebuild build-for-testing \
          -project "SilentCue.xcodeproj" \
          -scheme "SilentCue Watch App" \
          -destination "platform=watchOS Simulator,id=${{ steps.find-simulator.outputs.simulator_id }}" \
          -derivedDataPath ./xcbuild \
          -configuration Debug \
          -enableCodeCoverage YES \
          CODE_SIGNING_ALLOWED=NO
      
    - name: Run Unit Tests
      id: unit_tests
      run: |
        xcodebuild test-without-building \
          -project "SilentCue.xcodeproj" \
          -scheme "SilentCue Watch AppTests" \
          -destination "platform=watchOS Simulator,id=${{ steps.find-simulator.outputs.simulator_id }}" \
          -derivedDataPath ./xcbuild \
          -configuration Debug \
          -resultBundlePath ./test-results/unit/TestResults.xcresult \
          -enableCodeCoverage YES
        
        echo "UNIT_TEST_STATUS=$?" >> $GITHUB_ENV
      continue-on-error: false
      
    - name: Run UI Tests
      id: ui_tests
      run: |
        xcodebuild test-without-building \
          -project "SilentCue.xcodeproj" \
          -scheme "SilentCue Watch AppUITests" \
          -destination "platform=watchOS Simulator,id=${{ steps.find-simulator.outputs.simulator_id }}" \
          -derivedDataPath ./xcbuild \
          -configuration Debug \
          -resultBundlePath ./test-results/ui/TestResults.xcresult \
          -enableCodeCoverage YES
          
        echo "UI_TEST_STATUS=$?" >> $GITHUB_ENV
      continue-on-error: false
      
    - name: Generate Code Coverage Reports
      run: |
        echo "Checking for result bundles..."
        UNIT_RESULT_BUNDLE="./test-results/unit/TestResults.xcresult"
        UI_RESULT_BUNDLE="./test-results/ui/TestResults.xcresult"
        COMBINED_DIR="./test-results/combined"
        MERGED_RESULT_BUNDLE="$COMBINED_DIR/TestResults.xcresult"
        COMBINED_COVERAGE_JSON="$COMBINED_DIR/coverage.json"

        # --- CI Diagnosis: Check individual bundles BEFORE merge ---
        echo "--- Diagnosing Unit Test Bundle ---"
        if [ -d "$UNIT_RESULT_BUNDLE" ]; then
          echo "Attempting to view coverage from Unit bundle:"
          xcrun xccov view "$UNIT_RESULT_BUNDLE" || echo "Warning: Could not view Unit coverage data"
          echo "Attempting to generate JSON from Unit bundle (temporary):"
          xcrun xccov view --report --json "$UNIT_RESULT_BUNDLE" > ./test-results/unit/coverage_diag.json || echo "Warning: Failed to generate JSON from Unit bundle"
          ls -l ./test-results/unit/coverage_diag.json
        else
          echo "Warning: Unit test result bundle not found at $UNIT_RESULT_BUNDLE"
        fi

        echo "--- Diagnosing UI Test Bundle ---"
        if [ -d "$UI_RESULT_BUNDLE" ]; then
          echo "Attempting to view coverage from UI bundle:"
          xcrun xccov view "$UI_RESULT_BUNDLE" || echo "Warning: Could not view UI coverage data"
          echo "Attempting to generate JSON from UI bundle (temporary):"
          xcrun xccov view --report --json "$UI_RESULT_BUNDLE" > ./test-results/ui/coverage_diag.json || echo "Warning: Failed to generate JSON from UI bundle"
          ls -l ./test-results/ui/coverage_diag.json
        else
          echo "Warning: UI test result bundle not found at $UI_RESULT_BUNDLE"
        fi
        echo "--- End Diagnosis ---"
        # --- End CI Diagnosis ---

        if [ ! -d "$UNIT_RESULT_BUNDLE" ]; then
          echo "Error: Unit test result bundle not found at $UNIT_RESULT_BUNDLE"
          exit 1 # Exit if essential bundle is missing
        fi
        if [ ! -d "$UI_RESULT_BUNDLE" ]; then
          echo "Error: UI test result bundle not found at $UI_RESULT_BUNDLE"
          exit 1 # Exit if essential bundle is missing
        fi

        # Only proceed if both bundles exist (redundant check removed for brevity, added exit above)
        echo "Merging result bundles..."
        mkdir -p "$COMBINED_DIR"
        # Ensure clean merge target
        rm -rf "$MERGED_RESULT_BUNDLE"
        rm -f "$COMBINED_COVERAGE_JSON"

        if xcrun xcresulttool merge "$UNIT_RESULT_BUNDLE" "$UI_RESULT_BUNDLE" --output-path "$MERGED_RESULT_BUNDLE"; then
          echo "Result bundles merged successfully to $MERGED_RESULT_BUNDLE"

          if [ -d "$MERGED_RESULT_BUNDLE" ]; then
            echo "Generating combined coverage report..."
            if xcrun xccov view --report --json "$MERGED_RESULT_BUNDLE" > "$COMBINED_COVERAGE_JSON"; then
              echo "Combined coverage report generated at $COMBINED_COVERAGE_JSON"
              ls -l "$COMBINED_COVERAGE_JSON" # Check size
              if [ ! -s "$COMBINED_COVERAGE_JSON" ]; then
                  echo "Warning: Generated combined coverage.json file is empty."
              fi
            else
              echo "Error: Failed to generate coverage report from merged bundle."
              # Optionally view non-JSON report for debugging
              xcrun xccov view "$MERGED_RESULT_BUNDLE" || echo "Warning: Could not view merged coverage data"
              exit 1 # Exit if report generation fails
            fi
          else
            echo "Error: Merged result bundle not found unexpectedly."
            exit 1
          fi
        else
          echo "Error: Failed to merge result bundles."
          exit 1
        fi
      continue-on-error: false
      
    - name: Set Test Status
      id: test_status
      run: |
        if [ "$UNIT_TEST_STATUS" == "0" ] && [ "$UI_TEST_STATUS" == "0" ]; then
          echo "result=success" >> $GITHUB_OUTPUT
        else
          echo "result=failure" >> $GITHUB_OUTPUT
        fi
      
    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: ./test-results
        retention-days: 7

    - name: Upload Coverage Reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: ./test-results/**/coverage.json
        retention-days: 7 