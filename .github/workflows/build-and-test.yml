name: Build & Test

on:
  workflow_call:
    outputs:
      test_result:
        description: "Test Result"
        value: ${{ jobs.test.outputs.test_result }}

jobs:
  test:
    runs-on: macos-latest
    outputs:
      test_result: ${{ steps.test_status.outputs.result }}
    steps:
    - uses: actions/checkout@v4

    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '16.2'

    - name: Find Simulator
      id: find-simulator
      run: |
        echo "Available watchOS Simulators:"
        xcrun simctl list devices available | grep -A 20 "watchOS"
        
        # watchOSバージョンを取得
        WATCHOS_VERSION=$(xcrun simctl list devices available | grep -A 1 "watchOS" | head -1 | grep -oE 'watchOS [0-9]+\.[0-9]+')
        
        # シミュレータの名前とIDを取得
        SIMULATOR_INFO=$(xcrun simctl list devices available | grep -A 20 "watchOS" | grep 'Apple Watch Series' | head -1)
        SIMULATOR_NAME=$(echo "$SIMULATOR_INFO" | sed -E 's/^[[:space:]]*([^(]+).*$/\1/' | xargs)
        SIMULATOR_ID=$(echo "$SIMULATOR_INFO" | grep -oE '[0-9A-F\\-]{36}')
        
        echo "simulator_id=$SIMULATOR_ID" >> $GITHUB_OUTPUT
        echo "Using $SIMULATOR_NAME with $WATCHOS_VERSION (ID: $SIMULATOR_ID)"
        
    - name: Install xcpretty
      run: |
        gem install xcpretty
        
    - name: Create Test Results Directory
      run: mkdir -p test-results/unit test-results/ui
        
    - name: Build for Testing
      run: |
        xcodebuild build-for-testing \
          -project "SilentCue.xcodeproj" \
          -scheme "SilentCue Watch App" \
          -destination "platform=watchOS Simulator,id=${{ steps.find-simulator.outputs.simulator_id }}" \
          -derivedDataPath ./xcbuild \
          -enableCodeCoverage YES \
          GCC_INSTRUMENT_PROGRAM_FLOW_ARCS=YES \
          GCC_GENERATE_TEST_COVERAGE_FILES=YES \
          CODE_SIGNING_ALLOWED=NO \
          | xcpretty
      
    - name: Run Unit Tests
      id: unit_tests
      run: |
        xcodebuild test-without-building \
          -project "SilentCue.xcodeproj" \
          -scheme "SilentCue Watch AppTests" \
          -destination "platform=watchOS Simulator,id=${{ steps.find-simulator.outputs.simulator_id }}" \
          -derivedDataPath ./xcbuild \
          -resultBundlePath ./test-results/unit/TestResults.xcresult \
          -enableCodeCoverage YES \
          GCC_INSTRUMENT_PROGRAM_FLOW_ARCS=YES \
          GCC_GENERATE_TEST_COVERAGE_FILES=YES \
          | xcbeautify --report junit --report-path ./test-results/unit/junit.xml
        
        echo "UNIT_TEST_STATUS=$?" >> $GITHUB_ENV
      continue-on-error: true
      
    - name: Run UI Tests
      id: ui_tests
      run: |
        xcodebuild test-without-building \
          -project "SilentCue.xcodeproj" \
          -scheme "SilentCue Watch AppUITests" \
          -destination "platform=watchOS Simulator,id=${{ steps.find-simulator.outputs.simulator_id }}" \
          -derivedDataPath ./xcbuild \
          -resultBundlePath ./test-results/ui/TestResults.xcresult \
          -enableCodeCoverage YES \
          GCC_INSTRUMENT_PROGRAM_FLOW_ARCS=YES \
          GCC_GENERATE_TEST_COVERAGE_FILES=YES \
          | xcbeautify --report junit --report-path ./test-results/ui/junit.xml
          
        echo "UI_TEST_STATUS=$?" >> $GITHUB_ENV
      continue-on-error: true
      
    - name: Generate Code Coverage Reports
      run: |
        echo "Checking for result bundles..."
        UNIT_RESULT_BUNDLE="./test-results/unit/TestResults.xcresult"
        UI_RESULT_BUNDLE="./test-results/ui/TestResults.xcresult"
        COMBINED_DIR="./test-results/combined"
        MERGED_RESULT_BUNDLE="$COMBINED_DIR/TestResults.xcresult"
        COMBINED_COVERAGE_JSON="$COMBINED_DIR/coverage.json"

        if [ ! -d "$UNIT_RESULT_BUNDLE" ]; then
          echo "Warning: Unit test result bundle not found at $UNIT_RESULT_BUNDLE"
        fi
        if [ ! -d "$UI_RESULT_BUNDLE" ]; then
          echo "Warning: UI test result bundle not found at $UI_RESULT_BUNDLE"
        fi

        # Only proceed if both bundles exist
        if [ -d "$UNIT_RESULT_BUNDLE" ] && [ -d "$UI_RESULT_BUNDLE" ]; then
          echo "Merging result bundles..."
          mkdir -p "$COMBINED_DIR"
          if xcrun xcresulttool merge "$UNIT_RESULT_BUNDLE" "$UI_RESULT_BUNDLE" --output-path "$MERGED_RESULT_BUNDLE"; then
            echo "Result bundles merged successfully to $MERGED_RESULT_BUNDLE"
            
            if [ -d "$MERGED_RESULT_BUNDLE" ]; then
              echo "Generating combined coverage report..."
              if xcrun xccov view --report --json "$MERGED_RESULT_BUNDLE" > "$COMBINED_COVERAGE_JSON"; then
                echo "Combined coverage report generated at $COMBINED_COVERAGE_JSON"
              else
                echo "Error: Failed to generate coverage report from merged bundle."
                # Optionally view non-JSON report for debugging
                xcrun xccov view "$MERGED_RESULT_BUNDLE" || echo "Warning: Could not view merged coverage data"
              fi
            else
              echo "Error: Merged result bundle not found unexpectedly."
            fi
          else
            echo "Error: Failed to merge result bundles."
          fi
        else
          echo "Skipping merge and combined coverage generation as one or both source bundles are missing."
        fi
      continue-on-error: false
      
    - name: Set Test Status
      id: test_status
      run: |
        if [ "$UNIT_TEST_STATUS" == "0" ] && [ "$UI_TEST_STATUS" == "0" ]; then
          echo "result=success" >> $GITHUB_OUTPUT
        else
          echo "result=failure" >> $GITHUB_OUTPUT
        fi
      
    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: ./test-results
        retention-days: 7

    - name: Upload Coverage Reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: ./test-results/**/coverage.json
        retention-days: 7 