name: SilentCue CI/CD Pipeline

# SilentCue Watch Appのための統合CI/CDパイプライン
# このワークフローは各種プロセスを一元管理し、コード品質保証から本番ビルドまでを自動化します
#
# 処理フロー:
# 1. コード品質チェック - SwiftFormatとSwiftLintによるコードスタイルのチェック
# 2. ビルドとテスト - アプリのビルドとユニットテスト、UIテストの実行
# 3. テスト結果レポート - テスト結果の収集と解析、PRへのコメント投稿
# 4. コードレビュー - PRの場合、GitHub Copilotを使用した自動コードレビュー
# 5. 本番用ビルド - mainブランチへのマージ時に本番環境用のビルドを生成
# 6. 完了通知 - プロセス全体の結果をPRに通知

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  # コード品質チェック
  code-quality:
    name: Code Quality Check
    uses: ./.github/workflows/code-quality.yml
    
  # ビルドとテスト
  build-and-test:
    name: Build and Test
    uses: ./.github/workflows/build-and-test.yml
    
  # テスト結果レポート
  test-report:
    name: Test Report Generation
    needs: build-and-test
    if: always()
    permissions:
      checks: write
      issues: write
      pull-requests: write
    uses: ./.github/workflows/test-reporter.yml
    with:
      pr_number: ${{ github.event.pull_request.number || 0 }}
    
  # コードレビュー - PRの場合のみ実行
  code-review:
    name: Code Review
    needs: build-and-test
    if: github.event_name == 'pull_request' && needs.build-and-test.result == 'success'
    permissions:
      pull-requests: write
      contents: read
    uses: ./.github/workflows/copilot-review.yml
    with:
      pr_number: ${{ github.event.pull_request.number }}
    secrets: inherit
    
  # 本番用ビルド - mainブランチへのプッシュまたはPRマージ後
  production-build:
    name: Production Build
    needs: [build-and-test, code-quality]
    if: |
      needs.build-and-test.result == 'success' && 
      needs.code-quality.result == 'success' && 
      (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'))
    uses: ./.github/workflows/build-for-production.yml
    with:
      release_tag: v${{ github.run_number }}
      pr_number: ${{ github.event.pull_request.number || github.event.after }}
      
  # ビルド完了通知
  notify-completion:
    name: Notify Completion
    runs-on: ubuntu-latest
    needs: [code-quality, build-and-test, test-report, code-review, production-build]
    if: always()
    permissions:
      issues: write
    steps:
      - name: Determine Status
        id: status
        run: |
          if [[ "${{ needs.build-and-test.result }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "icon=✅" >> $GITHUB_OUTPUT
            echo "message=ビルドとテストが成功しました" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "icon=❌" >> $GITHUB_OUTPUT
            echo "message=ビルドまたはテストに失敗しました" >> $GITHUB_OUTPUT
          fi
      
      - name: Add Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              ...context.repo,
              issue_number: context.issue.number,
              body: `## CI/CD パイプライン完了 ${{ steps.status.outputs.icon }}
              
              ${{ steps.status.outputs.message }}
              
              ### ステータス概要:
              - コード品質チェック: ${{ needs.code-quality.result == 'success' && '✅' || '❌' }}
              - ビルドとテスト: ${{ needs.build-and-test.result == 'success' && '✅' || '❌' }}
              - テストレポート: ${{ needs.test-report.result == 'success' && '✅' || '❓' }}
              - コードレビュー: ${{ needs.code-review.result == 'success' && '✅' || (needs.code-review.result == 'skipped' && '⏭️' || '❌') }}
              - 本番ビルド: ${{ needs.production-build.result == 'success' && '✅' || (needs.production-build.result == 'skipped' && '⏭️' || '❌') }}
              `
            }); 