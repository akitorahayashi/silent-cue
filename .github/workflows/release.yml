name: Release SilentCue

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write

jobs:
  release:
    name: Build, Sign, and Release
    runs-on: macos-latest
    env:
      APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
      APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
      APP_STORE_CONNECT_API_PRIVATE_KEY: ${{ secrets.APP_STORE_CONNECT_API_PRIVATE_KEY }}
      DISTRIBUTION_CERTIFICATE_BASE64: ${{ secrets.DISTRIBUTION_CERTIFICATE_BASE64 }}
      P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
      PROVISIONING_PROFILE_BASE64: ${{ secrets.PROVISIONING_PROFILE_BASE64 }}
      TEAM_ID: ${{ secrets.TEAM_ID }}
      APP_BUNDLE_ID: ${{ secrets.APP_BUNDLE_ID }}
      EXPORT_DIR: ./ipa_export
      EXPORT_OPTIONS_PLIST: ./ExportOptions.plist

    steps:
      - name: Check for required secrets
        run: |
          if [ -z "$APP_STORE_CONNECT_API_KEY_ID" ] || \
             [ -z "$APP_STORE_CONNECT_ISSUER_ID" ] || \
             [ -z "$APP_STORE_CONNECT_API_PRIVATE_KEY" ] || \
             [ -z "$DISTRIBUTION_CERTIFICATE_BASE64" ] || \
             [ -z "$P12_PASSWORD" ] || \
             [ -z "$PROVISIONING_PROFILE_BASE64" ] || \
             [ -z "$TEAM_ID" ] || \
             [ -z "$APP_BUNDLE_ID" ]; then
            echo "Error: One or more required secrets for signing/upload are not set."
            exit 1
          fi
          echo "✅ All required secrets seem to be present."

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.2'

      - name: Setup Mint and Generate Project
        run: |
          brew install mint
          mint bootstrap
          mint run xcodegen generate

      # --- Signing Setup ---
      - name: Create temporary keychain
        id: keychain
        run: |
          KEYCHAIN_NAME="ci_temp_keychain_$(date +%s)"
          KEYCHAIN_PATH="$RUNNER_TEMP/$KEYCHAIN_NAME.keychain"
          KEYCHAIN_PASSWORD=$(openssl rand -base64 32)
          echo "::add-mask::$KEYCHAIN_PASSWORD"
          security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          security list-keychains -d user -s "$KEYCHAIN_PATH" $(security list-keychains -d user | grep -v "$KEYCHAIN_PATH")
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          security set-keychain-settings -lut 21600 "$KEYCHAIN_PATH"
          echo "keychain_path=$KEYCHAIN_PATH" >> $GITHUB_OUTPUT
          echo "keychain_password=$KEYCHAIN_PASSWORD" >> $GITHUB_OUTPUT

      - name: Decode and import distribution certificate
        run: |
          CERTIFICATE_PATH="$RUNNER_TEMP/dist_certificate.p12"
          echo "$DISTRIBUTION_CERTIFICATE_BASE64" | base64 --decode -o "$CERTIFICATE_PATH"
          security import "$CERTIFICATE_PATH" -k "${{ steps.keychain.outputs.keychain_path }}" -P "$P12_PASSWORD" -A
          security set-key-partition-list -S apple-tool:,apple: -s -k "${{ steps.keychain.outputs.keychain_path }}"
          rm "$CERTIFICATE_PATH"

      - name: Decode and install provisioning profile
        id: profile
        run: |
          PROFILE_DIR="$HOME/Library/MobileDevice/Provisioning Profiles"
          mkdir -p "$PROFILE_DIR"
          PROFILE_PATH="$PROFILE_DIR/$(uuidgen).mobileprovision"
          echo "$PROVISIONING_PROFILE_BASE64" | base64 --decode -o "$PROFILE_PATH"
          PROFILE_UUID=$(security cms -D -i "$PROFILE_PATH" | plutil -extract provisioningProfile.UUID xml1 -o - - | xmllint --xpath 'string(//string)' -)
          if [ -z "$PROFILE_UUID" ]; then echo "Error: Could not extract UUID from profile."; exit 1; fi
          echo "Installed profile $PROFILE_UUID"
          echo "uuid=$PROFILE_UUID" >> $GITHUB_OUTPUT
          echo "profile_path=$PROFILE_PATH" >> $GITHUB_OUTPUT

      - name: Create ExportOptions.plist
        run: |
          echo "Creating ExportOptions.plist at ${{ env.EXPORT_OPTIONS_PLIST }}"
          cat << EOF > "${{ env.EXPORT_OPTIONS_PLIST }}"
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>app-store</string>
              <key>teamID</key>
              <string>$TEAM_ID</string>
              <key>provisioningProfiles</key>
              <dict>
                  <key>$APP_BUNDLE_ID</key>
                  <string>${{ steps.profile.outputs.uuid }}</string>
              </dict>
              <key>signingStyle</key>
              <string>manual</string>
              <key>signingCertificate</key>
              <string>Apple Distribution</string>
              <key>uploadBitcode</key>
              <true/>
              <key>uploadSymbols</key>
              <true/>
          </dict>
          </plist>
          EOF
          echo "✅ ExportOptions.plist created."

      - name: Build, Export, Validate, and Upload IPA
        run: make release

      # --- GitHub Release ---
      - name: Get IPA path for release
        id: get_ipa
        run: |
          IPA_PATH=$(find "${{ env.EXPORT_DIR }}" -name "*.ipa" -print -quit)
          if [ -z "$IPA_PATH" ]; then
            echo "Error: Could not find IPA in ${{ env.EXPORT_DIR }} after make release."
            exit 1
          fi
          echo "Found IPA at $IPA_PATH"
          echo "ipa_path=$IPA_PATH" >> $GITHUB_OUTPUT

      - name: Create/Update GitHub Release and Upload IPA
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            Released version ${{ github.ref_name }}
            *Include release notes here.*
          draft: false
          prerelease: false
          files: ${{ steps.get_ipa.outputs.ipa_path }}
          token: ${{ secrets.GITHUB_TOKEN }}

      # --- Cleanup (Remains in Workflow) ---
      - name: Clean up keychain
        if: always()
        run: |
          echo "Cleaning up keychain: ${{ steps.keychain.outputs.keychain_path }}"
          security delete-keychain "${{ steps.keychain.outputs.keychain_path }}" || echo "Keychain cleanup failed (might not exist)"

      - name: Clean up provisioning profile
        if: always()
        run: |
          echo "Cleaning up profile: ${{ steps.profile.outputs.profile_path }}"
          rm -f "${{ steps.profile.outputs.profile_path }}" || echo "Profile cleanup failed (might not exist)"

      - name: Clean up build artifacts
        if: always()
        run: make clean-release 