name: Build for Production

on:
  workflow_call:
    inputs:
      release_tag:
        description: "Release Tag"
        required: true
        type: string
        # Release Tagはビルド成果物をGitHub Releasesに公開する際のバージョン識別子として使用されます。
        # 指定された場合、このタグ名でGitHubにドラフトリリースが自動作成され、ビルドされたIPAが添付されます。
        # CI/CDパイプラインでは通常、github.run_numberに基づいて自動生成されます（例: v123）。
      pr_number:
        description: "Pull Request Number"
        required: true
        type: number

jobs:
  prepare-release:
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.2'
          
      # ===== App Store リリース時にコメントを外す =====
      # 事前に以下のGitHub Secretsを設定する必要があります:
      # - BUILD_CERTIFICATE_BASE64: 配布用の証明書を文字列に変換したもの
      # - P12_PASSWORD: 証明書のパスワード
      # - KEYCHAIN_PASSWORD: キーチェーン用の任意のパスワード
      # - PROVISIONING_PROFILE_BASE64: App Store用のプロファイルを文字列に変換したもの
      # - EXPORT_OPTIONS_PLIST: (オプション) ビルド設定ファイルを文字列に変換したもの
      # ==================================================
      # - name: Install Apple Certificate
      #   env:
      #     BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
      #     P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
      #     KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      #   run: |
      #     # 証明書の復号と準備
      #     CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
      #     KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
      #     
      #     echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
      #     
      #     # キーチェーンの作成
      #     security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
      #     security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
      #     security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
      #     
      #     # 証明書のインポート
      #     security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
      #     security list-keychain -d user -s $KEYCHAIN_PATH
      
      # - name: Install Provisioning Profile
      #   env:
      #     PROVISIONING_PROFILE_BASE64: ${{ secrets.PROVISIONING_PROFILE_BASE64 }}
      #   run: |
      #     # プロビジョニングプロファイルの復号と準備
      #     mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
      #     PROFILE_PATH=~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision
      #     echo -n "$PROVISIONING_PROFILE_BASE64" | base64 --decode -o "$PROFILE_PATH"
        
      # ===== 現在の無署名ビルド - App Storeリリース時はコメントアウト =====
      - name: Build Release Version (Unsigned)
        run: |
          # バージョン情報の取得
          VERSION=$(grep -A 1 'MARKETING_VERSION' SilentCue.xcodeproj/project.pbxproj | tail -1 | sed 's/[^0-9.]//g')
          BUILD_NUMBER=$(grep -A 1 'CURRENT_PROJECT_VERSION' SilentCue.xcodeproj/project.pbxproj | tail -1 | sed 's/[^0-9]//g')
          echo "Building version $VERSION ($BUILD_NUMBER)"
          
          # ビルドディレクトリ作成
          mkdir -p ./build
          
          # 署名なしでビルド
          xcodebuild -project "SilentCue.xcodeproj" \
            -scheme "SilentCue Watch App" \
            -configuration Release \
            -destination "generic/platform=watchOS" \
            -archivePath "./build/SilentCue.xcarchive" \
            CODE_SIGNING_ALLOWED=NO \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            archive
      
      # ===== App Store リリース時はこちらを使用 (上記の無署名ビルドはコメントアウト) =====
      # - name: Build for App Store Release
      #   run: |
      #     # バージョン情報の取得
      #     VERSION=$(grep -A 1 'MARKETING_VERSION' SilentCue.xcodeproj/project.pbxproj | tail -1 | sed 's/[^0-9.]//g')
      #     BUILD_NUMBER=$(grep -A 1 'CURRENT_PROJECT_VERSION' SilentCue.xcodeproj/project.pbxproj | tail -1 | sed 's/[^0-9]//g')
      #     echo "Building version $VERSION ($BUILD_NUMBER) for App Store"
      #     
      #     # ビルドディレクトリ作成
      #     mkdir -p ./build
      #     
      #     # 署名付きビルドの実行
      #     xcodebuild -project "SilentCue.xcodeproj" \
      #       -scheme "SilentCue Watch App" \
      #       -configuration Release \
      #       -destination "generic/platform=watchOS" \
      #       clean archive -archivePath "./build/SilentCue.xcarchive" \
      #       CODE_SIGN_STYLE=Manual \
      #       CODE_SIGN_IDENTITY="Apple Distribution" \
      #       PROVISIONING_PROFILE_SPECIFIER="SilentCue WatchOS App Store Profile"
            
      # ===== 現在の無署名エクスポート設定 - App Storeリリース時はコメントアウト =====
      - name: Create IPA Package
        run: |
          # エクスポートオプション設定の作成
          cat > exportOptions.plist << EOL
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>development</string>
              <key>compileBitcode</key>
              <false/>
              <key>signingStyle</key>
              <string>automatic</string>
              <key>thinning</key>
              <string><none></string>
          </dict>
          </plist>
          EOL
          
          # IPAの生成 (署名なし)
          xcodebuild -exportArchive \
            -archivePath "./build/SilentCue.xcarchive" \
            -exportPath "./build/Export" \
            -exportOptionsPlist exportOptions.plist \
            -allowProvisioningUpdates
          
          # IPA生成後のチェック
          ls -la ./build/Export
      
      # ===== App Store リリース時はこちらを使用 (上記の無署名エクスポートはコメントアウト) =====
      # - name: Create App Store IPA Package
      #   env:
      #     EXPORT_OPTIONS_PLIST: ${{ secrets.EXPORT_OPTIONS_PLIST }}
      #   run: |
      #     # エクスポートオプション設定の作成
      #     if [ -z "$EXPORT_OPTIONS_PLIST" ]; then
      #       cat > exportOptions.plist << EOL
      #       <?xml version="1.0" encoding="UTF-8"?>
      #       <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
      #       <plist version="1.0">
      #       <dict>
      #           <key>method</key>
      #           <string>app-store</string>
      #           <key>teamID</key>
      #           <string>YOUR_TEAM_ID</string>
      #           <key>signingStyle</key>
      #           <string>manual</string>
      #           <key>stripSwiftSymbols</key>
      #           <true/>
      #           <key>uploadBitcode</key>
      #           <false/>
      #           <key>uploadSymbols</key>
      #           <true/>
      #       </dict>
      #       </plist>
      #       EOL
      #     else
      #       echo "$EXPORT_OPTIONS_PLIST" | base64 --decode > exportOptions.plist
      #     fi
      #     
      #     # App Store用IPAの生成
      #     xcodebuild -exportArchive \
      #       -archivePath "./build/SilentCue.xcarchive" \
      #       -exportPath "./build/Export" \
      #       -exportOptionsPlist exportOptions.plist
      #     
      #     # IPA生成後のチェック
      #     ls -la ./build/Export
            
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: production-build
          path: |
            ./build/Export
            ./build/SilentCue.xcarchive
          retention-days: 7
          
      # ===== GitHub Releasesへの自動ドラフト作成 - App Store リリース時は不要ならコメントアウト =====
      - name: Create GitHub Release
        if: inputs.release_tag != ''
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ inputs.release_tag }}
          name: Release ${{ inputs.release_tag }}
          draft: true
          files: ./build/Export/*.ipa
          token: ${{ secrets.GITHUB_TOKEN }}
          
      # ===== App Store リリース時にコメントを外す =====
      # App Store Connectへのアップロード用
      # 必要な設定:
      # - APP_STORE_CONNECT_KEY_ID: App Store接続用のキーID
      # - APP_STORE_CONNECT_ISSUER_ID: App Store接続用の発行者ID
      # - APP_STORE_CONNECT_PRIVATE_KEY_BASE64: App Store接続用の秘密キーを文字列に変換したもの
      # ==================================================
      # - name: Upload to App Store Connect
      #   env:
      #     APP_STORE_CONNECT_KEY_ID: ${{ secrets.APP_STORE_CONNECT_KEY_ID }}
      #     APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
      #     APP_STORE_CONNECT_PRIVATE_KEY_BASE64: ${{ secrets.APP_STORE_CONNECT_PRIVATE_KEY_BASE64 }}
      #   run: |
      #     # App Store Connect APIキーの設定
      #     mkdir -p ~/.appstoreconnect/private_keys/
      #     echo -n "$APP_STORE_CONNECT_PRIVATE_KEY_BASE64" | base64 --decode > ~/.appstoreconnect/private_keys/AuthKey_$APP_STORE_CONNECT_KEY_ID.p8
      #     
      #     # App Store Connectへのアップロード
      #     xcrun altool --upload-app -f "./build/Export/SilentCue.ipa" -t ios --apiKey "$APP_STORE_CONNECT_KEY_ID" --apiIssuer "$APP_STORE_CONNECT_ISSUER_ID" --verbose 